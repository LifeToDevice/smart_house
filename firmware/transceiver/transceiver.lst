;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14.02.2017 20:50:44
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2B9D      	GOTO       925
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00C3      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00C2      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
0x000D	0x0804      	MOVF       FSR, 0
0x000E	0x00A1      	MOVWF      33
;transceiver.c,147 :: 		void interrupt( )
;transceiver.c,149 :: 		if ( TMR0IF_bit )                                                           // Переполение таймера 0 (данные не передаются в течении длительного времени)
0x000F	0x1D0B      	BTFSS      TMR0IF_bit, BitPos(TMR0IF_bit+0)
0x0010	0x2814      	GOTO       L_interrupt0
;transceiver.c,151 :: 		TMR0IF_bit = 0;                                                         // Сброс флага переполнения таймера 0
0x0011	0x110B      	BCF        TMR0IF_bit, BitPos(TMR0IF_bit+0)
;transceiver.c,152 :: 		recv_done = 0;
0x0012	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,153 :: 		recv_processing = 0;                                                    // Устанавливаем состояние свободной линии (никто не передает данные)
0x0013	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,154 :: 		}
L_interrupt0:
;transceiver.c,156 :: 		if ( INTF_bit )                                                             // Прерывание INT0 (прием данных)
0x0014	0x1C8B      	BTFSS      INTF_bit, BitPos(INTF_bit+0)
0x0015	0x284C      	GOTO       L_interrupt1
;transceiver.c,158 :: 		INTF_bit = 0;                                                           // Сброс флага INT0
0x0016	0x108B      	BCF        INTF_bit, BitPos(INTF_bit+0)
;transceiver.c,160 :: 		if ( recv_done == 0 )                                                   // Прием разрешен (все предыдущие пакеты обработаны)
0x0017	0x19AA      	BTFSC      _recv_done, BitPos(_recv_done+0)
0x0018	0x284C      	GOTO       L_interrupt2
;transceiver.c,162 :: 		if ( recv_processing == 0 )                                         // Если прием данных еще не начат (начало приема)
0x0019	0x182A      	BTFSC      _recv_processing, BitPos(_recv_processing+0)
0x001A	0x2821      	GOTO       L_interrupt3
;transceiver.c,164 :: 		recv_processing = 1;                                            // Прием начат
0x001B	0x142A      	BSF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,165 :: 		recv_byte = 0;                                                  // Обнуляем приемный байт
0x001C	0x01A7      	CLRF       _recv_byte
;transceiver.c,166 :: 		recv_bit_counter = 0;                                           // Обнуляем счетчик битов
0x001D	0x01A8      	CLRF       _recv_bit_counter
;transceiver.c,167 :: 		recv_byte_counter = 0;                                          // Обнуляем счетчик байтов
0x001E	0x01A6      	CLRF       _recv_byte_counter
;transceiver.c,168 :: 		TMR0 = 0;                                                       // Сбрасываем таймер 0
0x001F	0x0181      	CLRF       TMR0
;transceiver.c,169 :: 		}
0x0020	0x284C      	GOTO       L_interrupt4
L_interrupt3:
;transceiver.c,172 :: 		bit_time = TMR0;
0x0021	0x0801      	MOVF       TMR0, 0
0x0022	0x00A2      	MOVWF      _bit_time
;transceiver.c,174 :: 		if ( (bit_time > 20) && (bit_time < 30) )                       // Единица
0x0023	0x0822      	MOVF       _bit_time, 0
0x0024	0x3C14      	SUBLW      20
0x0025	0x1803      	BTFSC      STATUS, 0
0x0026	0x282E      	GOTO       L_interrupt7
0x0027	0x301E      	MOVLW      30
0x0028	0x0222      	SUBWF      _bit_time, 0
0x0029	0x1803      	BTFSC      STATUS, 0
0x002A	0x282E      	GOTO       L_interrupt7
L__interrupt102:
;transceiver.c,176 :: 		recv_byte <<= 1;                                            // Сдвиг
0x002B	0x0DA7      	RLF        _recv_byte, 1
0x002C	0x1027      	BCF        _recv_byte, 0
;transceiver.c,177 :: 		recv_byte |= 1;                                             // Установка бита
0x002D	0x1427      	BSF        _recv_byte, 0
;transceiver.c,178 :: 		}
L_interrupt7:
;transceiver.c,180 :: 		if ( bit_time > 8 && bit_time < 16 )                            // Ноль
0x002E	0x0822      	MOVF       _bit_time, 0
0x002F	0x3C08      	SUBLW      8
0x0030	0x1803      	BTFSC      STATUS, 0
0x0031	0x2839      	GOTO       L_interrupt10
0x0032	0x3010      	MOVLW      16
0x0033	0x0222      	SUBWF      _bit_time, 0
0x0034	0x1803      	BTFSC      STATUS, 0
0x0035	0x2839      	GOTO       L_interrupt10
L__interrupt101:
;transceiver.c,182 :: 		recv_byte <<= 1;
0x0036	0x0DA7      	RLF        _recv_byte, 1
0x0037	0x1027      	BCF        _recv_byte, 0
;transceiver.c,183 :: 		asm {nop};                                                  // Сдвиг
0x0038	0x0000      	NOP
;transceiver.c,184 :: 		}
L_interrupt10:
;transceiver.c,186 :: 		if ( ++recv_bit_counter == 8 )                                  // Принято 8 бит (байт)
0x0039	0x0AA8      	INCF       _recv_bit_counter, 1
0x003A	0x0828      	MOVF       _recv_bit_counter, 0
0x003B	0x3A08      	XORLW      8
0x003C	0x1D03      	BTFSS      STATUS, 2
0x003D	0x284B      	GOTO       L_interrupt11
;transceiver.c,188 :: 		recv_buf[recv_byte_counter] = recv_byte;                    // Помещаем принятый байт в приемный буфер
0x003E	0x0826      	MOVF       _recv_byte_counter, 0
0x003F	0x3E3A      	ADDLW      _recv_buf
0x0040	0x0084      	MOVWF      FSR
0x0041	0x0827      	MOVF       _recv_byte, 0
0x0042	0x0080      	MOVWF      INDF
;transceiver.c,189 :: 		recv_byte = 0;                                              // Очищаем байт
0x0043	0x01A7      	CLRF       _recv_byte
;transceiver.c,190 :: 		recv_bit_counter = 0;                                       // Обнуляем счетчик битов
0x0044	0x01A8      	CLRF       _recv_bit_counter
;transceiver.c,192 :: 		if ( ++recv_byte_counter == PACKET_SIZE )                   // Увеличиваем счетчик байтов
0x0045	0x0AA6      	INCF       _recv_byte_counter, 1
0x0046	0x0826      	MOVF       _recv_byte_counter, 0
0x0047	0x3A08      	XORLW      8
0x0048	0x1D03      	BTFSS      STATUS, 2
0x0049	0x284B      	GOTO       L_interrupt12
;transceiver.c,193 :: 		recv_done = 1;                                          // Прием пакета завершен (необходимо забрать и обработать данные из приемного буфера)
0x004A	0x15AA      	BSF        _recv_done, BitPos(_recv_done+0)
L_interrupt12:
;transceiver.c,194 :: 		}
L_interrupt11:
;transceiver.c,196 :: 		TMR0 = 0;                                                       // Обнуляем таймер 0
0x004B	0x0181      	CLRF       TMR0
;transceiver.c,197 :: 		}
L_interrupt4:
;transceiver.c,198 :: 		}
L_interrupt2:
;transceiver.c,199 :: 		}
L_interrupt1:
;transceiver.c,200 :: 		}
L_end_interrupt:
L__interrupt113:
0x004C	0x0820      	MOVF       32, 0
0x004D	0x00F0      	MOVWF      R0
0x004E	0x0821      	MOVF       33, 0
0x004F	0x0084      	MOVWF      FSR
0x0050	0x0842      	MOVF       ___savePCLATH, 0
0x0051	0x008A      	MOVWF      PCLATH
0x0052	0x0E43      	SWAPF      ___saveSTATUS, 0
0x0053	0x0083      	MOVWF      STATUS
0x0054	0x0EFF      	SWAPF      R15, 1
0x0055	0x0E7F      	SWAPF      R15, 0
0x0056	0x0009      	RETFIE
; end of _interrupt
_memcpy:
;__Lib_CString.c,37 :: 		
;__Lib_CString.c,41 :: 		
0x0057	0x1283      	BCF        STATUS, 5
0x0058	0x1303      	BCF        STATUS, 6
0x0059	0x084F      	MOVF       FARG_memcpy_s1, 0
0x005A	0x00F3      	MOVWF      R3
;__Lib_CString.c,42 :: 		
0x005B	0x084E      	MOVF       FARG_memcpy_d1, 0
0x005C	0x00F2      	MOVWF      R2
;__Lib_CString.c,43 :: 		
L_memcpy7:
0x005D	0x0850      	MOVF       FARG_memcpy_n, 0
0x005E	0x00F0      	MOVWF      R0
0x005F	0x0851      	MOVF       FARG_memcpy_n+1, 0
0x0060	0x00F1      	MOVWF      R0+1
0x0061	0x3001      	MOVLW      1
0x0062	0x02D0      	SUBWF      FARG_memcpy_n, 1
0x0063	0x1C03      	BTFSS      STATUS, 0
0x0064	0x03D1      	DECF       FARG_memcpy_n+1, 1
0x0065	0x0870      	MOVF       R0, 0
0x0066	0x0471      	IORWF      R0+1, 0
0x0067	0x1903      	BTFSC      STATUS, 2
0x0068	0x2874      	GOTO       L_memcpy8
;__Lib_CString.c,44 :: 		
0x0069	0x0873      	MOVF       R3, 0
0x006A	0x0084      	MOVWF      FSR
0x006B	0x0800      	MOVF       INDF, 0
0x006C	0x00F0      	MOVWF      R0
0x006D	0x0872      	MOVF       R2, 0
0x006E	0x0084      	MOVWF      FSR
0x006F	0x0870      	MOVF       R0, 0
0x0070	0x0080      	MOVWF      INDF
0x0071	0x0AF2      	INCF       R2, 1
0x0072	0x0AF3      	INCF       R3, 1
0x0073	0x285D      	GOTO       L_memcpy7
L_memcpy8:
;__Lib_CString.c,46 :: 		
0x0074	0x084E      	MOVF       FARG_memcpy_d1, 0
0x0075	0x00F0      	MOVWF      R0
;__Lib_CString.c,47 :: 		
L_end_memcpy:
0x0076	0x0008      	RETURN
; end of _memcpy
_Mul_16X16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x0077	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,144 :: 		
0x0078	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,145 :: 		
0x0079	0x01FB      	CLRF       R11
;__Lib_Math.c,146 :: 		
0x007A	0x01FA      	CLRF       R10
;__Lib_Math.c,147 :: 		
0x007B	0x01F9      	CLRF       R9
;__Lib_Math.c,148 :: 		
0x007C	0x3080      	MOVLW      128
;__Lib_Math.c,149 :: 		
0x007D	0x00F8      	MOVWF      R8
;__Lib_Math.c,150 :: 		
0x007E	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,151 :: 		
0x007F	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,152 :: 		
0x0080	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,153 :: 		
0x0081	0x288B      	GOTO       $+10
;__Lib_Math.c,154 :: 		
0x0082	0x0874      	MOVF       R4, 0
;__Lib_Math.c,155 :: 		
0x0083	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,156 :: 		
0x0084	0x0875      	MOVF       R5, 0
;__Lib_Math.c,157 :: 		
0x0085	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,158 :: 		
0x0086	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,159 :: 		
0x0087	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,160 :: 		
0x0088	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,161 :: 		
0x0089	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,162 :: 		
0x008A	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,163 :: 		
0x008B	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,164 :: 		
0x008C	0x2893      	GOTO       $+7
;__Lib_Math.c,165 :: 		
0x008D	0x0874      	MOVF       R4, 0
;__Lib_Math.c,166 :: 		
0x008E	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,167 :: 		
0x008F	0x0875      	MOVF       R5, 0
;__Lib_Math.c,168 :: 		
0x0090	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,169 :: 		
0x0091	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,170 :: 		
0x0092	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,171 :: 		
0x0093	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,172 :: 		
0x0094	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,173 :: 		
0x0095	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,174 :: 		
0x0096	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,175 :: 		
0x0097	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,176 :: 		
0x0098	0x287E      	GOTO       $-26
;__Lib_Math.c,177 :: 		
0x0099	0x087B      	MOVF       R11, 0
;__Lib_Math.c,178 :: 		
0x009A	0x00F3      	MOVWF      R3
;__Lib_Math.c,179 :: 		
0x009B	0x087A      	MOVF       R10, 0
;__Lib_Math.c,180 :: 		
0x009C	0x00F2      	MOVWF      R2
;__Lib_Math.c,181 :: 		
0x009D	0x0879      	MOVF       R9, 0
;__Lib_Math.c,182 :: 		
0x009E	0x00F1      	MOVWF      R1
;__Lib_Math.c,183 :: 		
0x009F	0x0878      	MOVF       R8, 0
;__Lib_Math.c,184 :: 		
0x00A0	0x00F0      	MOVWF      R0
;__Lib_Math.c,187 :: 		
L_end_Mul_16X16_U:
0x00A1	0x0008      	RETURN
; end of _Mul_16X16_U
_Mul_8X8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,108 :: 		
0x00A2	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,109 :: 		
0x00A3	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,110 :: 		
0x00A4	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x00A5	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x00A6	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x00A7	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x00A8	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x00A9	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x00AA	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x00AB	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x00AC	0x28B1      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x00AD	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x00AE	0x28AA      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x00AF	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x00B0	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x00B1	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x00B2	0x28B6      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x00B3	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x00B4	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x00B5	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x00B6	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x00B7	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x00B8	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x00B9	0x28B3      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
L_end_Mul_8X8_U:
0x00BA	0x0008      	RETURN
; end of _Mul_8X8_U
_crc8:
;transceiver.c,217 :: 		unsigned char crc8( unsigned char *block )
;transceiver.c,219 :: 		unsigned char crc = 0xFF;
0x00BB	0x30FF      	MOVLW      255
0x00BC	0x1283      	BCF        STATUS, 5
0x00BD	0x1303      	BCF        STATUS, 6
0x00BE	0x00CF      	MOVWF      crc8_crc_L0
0x00BF	0x3007      	MOVLW      7
0x00C0	0x00D0      	MOVWF      crc8_len_L0
;transceiver.c,223 :: 		while ( len-- )
L_crc813:
0x00C1	0x0850      	MOVF       crc8_len_L0, 0
0x00C2	0x00F0      	MOVWF      R0
0x00C3	0x03D0      	DECF       crc8_len_L0, 1
0x00C4	0x0870      	MOVF       R0, 0
0x00C5	0x1903      	BTFSC      STATUS, 2
0x00C6	0x28E9      	GOTO       L_crc814
;transceiver.c,225 :: 		crc ^= *block++;
0x00C7	0x084E      	MOVF       FARG_crc8_block, 0
0x00C8	0x0084      	MOVWF      FSR
0x00C9	0x0800      	MOVF       INDF, 0
0x00CA	0x06CF      	XORWF      crc8_crc_L0, 1
0x00CB	0x0ACE      	INCF       FARG_crc8_block, 1
;transceiver.c,226 :: 		for ( i = 0; i < 8; i++ )
0x00CC	0x01F3      	CLRF       R3
L_crc815:
0x00CD	0x3008      	MOVLW      8
0x00CE	0x0273      	SUBWF      R3, 0
0x00CF	0x1803      	BTFSC      STATUS, 0
0x00D0	0x28E8      	GOTO       L_crc816
;transceiver.c,227 :: 		crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
0x00D1	0x1FCF      	BTFSS      crc8_crc_L0, 7
0x00D2	0x28DE      	GOTO       L_crc818
0x00D3	0x084F      	MOVF       crc8_crc_L0, 0
0x00D4	0x00F1      	MOVWF      R1
0x00D5	0x01F2      	CLRF       R1+1
0x00D6	0x0DF1      	RLF        R1, 1
0x00D7	0x0DF2      	RLF        R1+1, 1
0x00D8	0x1071      	BCF        R1, 0
0x00D9	0x3031      	MOVLW      49
0x00DA	0x06F1      	XORWF      R1, 1
0x00DB	0x3000      	MOVLW      0
0x00DC	0x00F2      	MOVWF      R1+1
0x00DD	0x28E4      	GOTO       L_crc819
L_crc818:
0x00DE	0x084F      	MOVF       crc8_crc_L0, 0
0x00DF	0x00F1      	MOVWF      R1
0x00E0	0x01F2      	CLRF       R1+1
0x00E1	0x0DF1      	RLF        R1, 1
0x00E2	0x0DF2      	RLF        R1+1, 1
0x00E3	0x1071      	BCF        R1, 0
L_crc819:
0x00E4	0x0871      	MOVF       R1, 0
0x00E5	0x00CF      	MOVWF      crc8_crc_L0
;transceiver.c,226 :: 		for ( i = 0; i < 8; i++ )
0x00E6	0x0AF3      	INCF       R3, 1
;transceiver.c,227 :: 		crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
0x00E7	0x28CD      	GOTO       L_crc815
L_crc816:
;transceiver.c,228 :: 		}
0x00E8	0x28C1      	GOTO       L_crc813
L_crc814:
;transceiver.c,230 :: 		return crc;
0x00E9	0x084F      	MOVF       crc8_crc_L0, 0
0x00EA	0x00F0      	MOVWF      R0
;transceiver.c,231 :: 		}
L_end_crc8:
0x00EB	0x0008      	RETURN
; end of _crc8
_send_data:
;transceiver.c,235 :: 		void send_data( unsigned char *d, unsigned char size )
;transceiver.c,239 :: 		while ( size-- )                                                            // Последовательно передаем все байты
L_send_data20:
0x00EC	0x1283      	BCF        STATUS, 5
0x00ED	0x1303      	BCF        STATUS, 6
0x00EE	0x084F      	MOVF       FARG_send_data_size, 0
0x00EF	0x00F0      	MOVWF      R0
0x00F0	0x03CF      	DECF       FARG_send_data_size, 1
0x00F1	0x0870      	MOVF       R0, 0
0x00F2	0x1903      	BTFSC      STATUS, 2
0x00F3	0x2918      	GOTO       L_send_data21
;transceiver.c,241 :: 		b = *d++;
0x00F4	0x084E      	MOVF       FARG_send_data_d, 0
0x00F5	0x0084      	MOVWF      FSR
0x00F6	0x0800      	MOVF       INDF, 0
0x00F7	0x00F1      	MOVWF      R1
0x00F8	0x0ACE      	INCF       FARG_send_data_d, 1
;transceiver.c,243 :: 		for ( i = 0; i < 8; i++ )                                               // Последовательная передача 8-ми бит
0x00F9	0x01F2      	CLRF       R2
L_send_data22:
0x00FA	0x3008      	MOVLW      8
0x00FB	0x0272      	SUBWF      R2, 0
0x00FC	0x1803      	BTFSC      STATUS, 0
0x00FD	0x2917      	GOTO       L_send_data23
;transceiver.c,245 :: 		DI_PIN = 0;                                                         // Стартовое условие
0x00FE	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,246 :: 		Delay_us(BIT_START_TIME);
0x00FF	0x3010      	MOVLW      16
0x0100	0x00FD      	MOVWF      R13
L_send_data25:
0x0101	0x0BFD      	DECFSZ     R13, 1
0x0102	0x2901      	GOTO       L_send_data25
0x0103	0x0000      	NOP
;transceiver.c,247 :: 		DI_PIN = 1;
0x0104	0x1506      	BSF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,249 :: 		if ( b & 0b10000000 )                                               // Единица
0x0105	0x1FF1      	BTFSS      R1, 7
0x0106	0x290E      	GOTO       L_send_data26
;transceiver.c,250 :: 		Delay_us(BIT_ONE_TIME);
0x0107	0x3031      	MOVLW      49
0x0108	0x00FD      	MOVWF      R13
L_send_data27:
0x0109	0x0BFD      	DECFSZ     R13, 1
0x010A	0x2909      	GOTO       L_send_data27
0x010B	0x0000      	NOP
0x010C	0x0000      	NOP
0x010D	0x2913      	GOTO       L_send_data28
L_send_data26:
;transceiver.c,252 :: 		Delay_us(BIT_ZERO_TIME);
0x010E	0x3010      	MOVLW      16
0x010F	0x00FD      	MOVWF      R13
L_send_data29:
0x0110	0x0BFD      	DECFSZ     R13, 1
0x0111	0x2910      	GOTO       L_send_data29
0x0112	0x0000      	NOP
L_send_data28:
;transceiver.c,254 :: 		b <<= 1;                                                            // Сдвиг
0x0113	0x0DF1      	RLF        R1, 1
0x0114	0x1071      	BCF        R1, 0
;transceiver.c,243 :: 		for ( i = 0; i < 8; i++ )                                               // Последовательная передача 8-ми бит
0x0115	0x0AF2      	INCF       R2, 1
;transceiver.c,255 :: 		}
0x0116	0x28FA      	GOTO       L_send_data22
L_send_data23:
;transceiver.c,256 :: 		}
0x0117	0x28EC      	GOTO       L_send_data20
L_send_data21:
;transceiver.c,259 :: 		DI_PIN = 0;                                                                 // Завершение передачи данных
0x0118	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,260 :: 		Delay_us(BIT_START_TIME);
0x0119	0x3010      	MOVLW      16
0x011A	0x00FD      	MOVWF      R13
L_send_data30:
0x011B	0x0BFD      	DECFSZ     R13, 1
0x011C	0x291B      	GOTO       L_send_data30
0x011D	0x0000      	NOP
;transceiver.c,261 :: 		DI_PIN = 1;
0x011E	0x1506      	BSF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,262 :: 		}
L_end_send_data:
0x011F	0x0008      	RETURN
; end of _send_data
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0120	0x1283      	BCF        STATUS, 5
0x0121	0x1303      	BCF        STATUS, 6
0x0122	0x082C      	MOVF       ___DoICPAddr+1, 0
0x0123	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0124	0x082B      	MOVF       ___DoICPAddr, 0
0x0125	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0126	0x0008      	RETURN
; end of _____DoICP
_push_command:
;transceiver.c,355 :: 		void push_command( )
;transceiver.c,357 :: 		if ( data_queue_size == QUEUE_SIZE - 1 )                                    // Если очередь полностью заполнена, игнорируем принимаемые данные
0x0127	0x1283      	BCF        STATUS, 5
0x0128	0x1303      	BCF        STATUS, 6
0x0129	0x0825      	MOVF       _data_queue_size, 0
0x012A	0x3A0F      	XORLW      15
0x012B	0x1D03      	BTFSS      STATUS, 2
0x012C	0x292E      	GOTO       L_push_command42
;transceiver.c,358 :: 		return;
0x012D	0x2968      	GOTO       L_end_push_command
L_push_command42:
;transceiver.c,360 :: 		data_queue[data_queue_size].b[0] = recv_buf[0];                             // Отправитель
0x012E	0x3005      	MOVLW      5
0x012F	0x00F0      	MOVWF      R0
0x0130	0x0825      	MOVF       _data_queue_size, 0
0x0131	0x00F4      	MOVWF      R4
0x0132	0x20A2      	CALL       _Mul_8X8_U
0x0133	0x0870      	MOVF       R0, 0
0x0134	0x3EA0      	ADDLW      _data_queue
0x0135	0x0084      	MOVWF      FSR
0x0136	0x083A      	MOVF       _recv_buf, 0
0x0137	0x0080      	MOVWF      INDF
;transceiver.c,361 :: 		data_queue[data_queue_size].b[1] = recv_buf[3];                             // Первый байт данных
0x0138	0x3005      	MOVLW      5
0x0139	0x00F0      	MOVWF      R0
0x013A	0x0825      	MOVF       _data_queue_size, 0
0x013B	0x00F4      	MOVWF      R4
0x013C	0x20A2      	CALL       _Mul_8X8_U
0x013D	0x30A0      	MOVLW      _data_queue
0x013E	0x07F0      	ADDWF      R0, 1
0x013F	0x0A70      	INCF       R0, 0
0x0140	0x0084      	MOVWF      FSR
0x0141	0x083D      	MOVF       _recv_buf+3, 0
0x0142	0x0080      	MOVWF      INDF
;transceiver.c,362 :: 		data_queue[data_queue_size].b[2] = recv_buf[4];                             // Второй байт данных
0x0143	0x3005      	MOVLW      5
0x0144	0x00F0      	MOVWF      R0
0x0145	0x0825      	MOVF       _data_queue_size, 0
0x0146	0x00F4      	MOVWF      R4
0x0147	0x20A2      	CALL       _Mul_8X8_U
0x0148	0x30A0      	MOVLW      _data_queue
0x0149	0x07F0      	ADDWF      R0, 1
0x014A	0x3002      	MOVLW      2
0x014B	0x0770      	ADDWF      R0, 0
0x014C	0x0084      	MOVWF      FSR
0x014D	0x083E      	MOVF       _recv_buf+4, 0
0x014E	0x0080      	MOVWF      INDF
;transceiver.c,363 :: 		data_queue[data_queue_size].b[3] = recv_buf[5];                             // Третий байт данных
0x014F	0x3005      	MOVLW      5
0x0150	0x00F0      	MOVWF      R0
0x0151	0x0825      	MOVF       _data_queue_size, 0
0x0152	0x00F4      	MOVWF      R4
0x0153	0x20A2      	CALL       _Mul_8X8_U
0x0154	0x30A0      	MOVLW      _data_queue
0x0155	0x07F0      	ADDWF      R0, 1
0x0156	0x3003      	MOVLW      3
0x0157	0x0770      	ADDWF      R0, 0
0x0158	0x0084      	MOVWF      FSR
0x0159	0x083F      	MOVF       _recv_buf+5, 0
0x015A	0x0080      	MOVWF      INDF
;transceiver.c,364 :: 		data_queue[data_queue_size].b[4] = recv_buf[6];                             // Третий байт данных
0x015B	0x3005      	MOVLW      5
0x015C	0x00F0      	MOVWF      R0
0x015D	0x0825      	MOVF       _data_queue_size, 0
0x015E	0x00F4      	MOVWF      R4
0x015F	0x20A2      	CALL       _Mul_8X8_U
0x0160	0x30A0      	MOVLW      _data_queue
0x0161	0x07F0      	ADDWF      R0, 1
0x0162	0x3004      	MOVLW      4
0x0163	0x0770      	ADDWF      R0, 0
0x0164	0x0084      	MOVWF      FSR
0x0165	0x0840      	MOVF       _recv_buf+6, 0
0x0166	0x0080      	MOVWF      INDF
;transceiver.c,366 :: 		data_queue_size++;                                                          // Смещаем указатель на последний элемент очереди
0x0167	0x0AA5      	INCF       _data_queue_size, 1
;transceiver.c,367 :: 		}
L_end_push_command:
0x0168	0x0008      	RETURN
; end of _push_command
_send_ack:
;transceiver.c,265 :: 		void send_ack( unsigned char *bf )
;transceiver.c,267 :: 		Delay_us(500);
0x0169	0x3004      	MOVLW      4
0x016A	0x1283      	BCF        STATUS, 5
0x016B	0x1303      	BCF        STATUS, 6
0x016C	0x00FC      	MOVWF      R12
0x016D	0x303D      	MOVLW      61
0x016E	0x00FD      	MOVWF      R13
L_send_ack31:
0x016F	0x0BFD      	DECFSZ     R13, 1
0x0170	0x296F      	GOTO       L_send_ack31
0x0171	0x0BFC      	DECFSZ     R12, 1
0x0172	0x296F      	GOTO       L_send_ack31
0x0173	0x0000      	NOP
0x0174	0x0000      	NOP
;transceiver.c,269 :: 		send_buf[0] = device_addr;                                                  // Отправитель
0x0175	0x0824      	MOVF       _device_addr, 0
0x0176	0x00B2      	MOVWF      _send_buf
;transceiver.c,270 :: 		send_buf[1] = bf[0];                                                        // Получатель
0x0177	0x084A      	MOVF       FARG_send_ack_bf, 0
0x0178	0x0084      	MOVWF      FSR
0x0179	0x0800      	MOVF       INDF, 0
0x017A	0x00B3      	MOVWF      _send_buf+1
;transceiver.c,271 :: 		send_buf[2] = bf[2] | 0b10000000;                                           // Номер пакета (устанавливаем 8 бит номера пакета - признак того, что данный пакет подтверждающий)
0x017B	0x3002      	MOVLW      2
0x017C	0x074A      	ADDWF      FARG_send_ack_bf, 0
0x017D	0x0084      	MOVWF      FSR
0x017E	0x3080      	MOVLW      128
0x017F	0x0400      	IORWF      INDF, 0
0x0180	0x00B4      	MOVWF      _send_buf+2
;transceiver.c,272 :: 		send_buf[3] = 0;                                                            // 1 байт данных (пусто)
0x0181	0x01B5      	CLRF       _send_buf+3
;transceiver.c,273 :: 		send_buf[4] = 0;                                                            // 2 байт данных (пусто)
0x0182	0x01B6      	CLRF       _send_buf+4
;transceiver.c,274 :: 		send_buf[5] = 0;                                                            // 3 байт данных (пусто)
0x0183	0x01B7      	CLRF       _send_buf+5
;transceiver.c,275 :: 		send_buf[6] = 0;                                                            // 4 байт данных (пусто)
0x0184	0x01B8      	CLRF       _send_buf+6
;transceiver.c,276 :: 		send_buf[7] = crc8(send_buf);                                               // Контрольная сумма пакета
0x0185	0x3032      	MOVLW      _send_buf
0x0186	0x00CE      	MOVWF      FARG_crc8_block
0x0187	0x20BB      	CALL       _crc8
0x0188	0x0870      	MOVF       R0, 0
0x0189	0x00B9      	MOVWF      _send_buf+7
;transceiver.c,278 :: 		MAX485_TRANSMIT;
0x018A	0x1486      	BSF        RB1_bit, BitPos(RB1_bit+0)
0x018B	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,280 :: 		send_data(send_buf, PACKET_SIZE);                                           // Передаем
0x018C	0x3032      	MOVLW      _send_buf
0x018D	0x00CE      	MOVWF      FARG_send_data_d
0x018E	0x3008      	MOVLW      8
0x018F	0x00CF      	MOVWF      FARG_send_data_size
0x0190	0x20EC      	CALL       _send_data
;transceiver.c,282 :: 		MAX485_RECEIVE;                                                             // Переводим MAX485 в режим приема
0x0191	0x1086      	BCF        RB1_bit, BitPos(RB1_bit+0)
0x0192	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,283 :: 		}
L_end_send_ack:
0x0193	0x0008      	RETURN
; end of _send_ack
_memset:
;__Lib_CString.c,77 :: 		
;__Lib_CString.c,80 :: 		
0x0194	0x1283      	BCF        STATUS, 5
0x0195	0x1303      	BCF        STATUS, 6
0x0196	0x084A      	MOVF       FARG_memset_p1, 0
0x0197	0x00F2      	MOVWF      R2
;__Lib_CString.c,81 :: 		
L_memset20:
0x0198	0x084C      	MOVF       FARG_memset_n, 0
0x0199	0x00F0      	MOVWF      R0
0x019A	0x084D      	MOVF       FARG_memset_n+1, 0
0x019B	0x00F1      	MOVWF      R0+1
0x019C	0x3001      	MOVLW      1
0x019D	0x02CC      	SUBWF      FARG_memset_n, 1
0x019E	0x1C03      	BTFSS      STATUS, 0
0x019F	0x03CD      	DECF       FARG_memset_n+1, 1
0x01A0	0x0870      	MOVF       R0, 0
0x01A1	0x0471      	IORWF      R0+1, 0
0x01A2	0x1903      	BTFSC      STATUS, 2
0x01A3	0x29AA      	GOTO       L_memset21
;__Lib_CString.c,82 :: 		
0x01A4	0x0872      	MOVF       R2, 0
0x01A5	0x0084      	MOVWF      FSR
0x01A6	0x084B      	MOVF       FARG_memset_character, 0
0x01A7	0x0080      	MOVWF      INDF
0x01A8	0x0AF2      	INCF       R2, 1
0x01A9	0x2998      	GOTO       L_memset20
L_memset21:
;__Lib_CString.c,83 :: 		
0x01AA	0x084A      	MOVF       FARG_memset_p1, 0
0x01AB	0x00F0      	MOVWF      R0
;__Lib_CString.c,84 :: 		
L_end_memset:
0x01AC	0x0008      	RETURN
; end of _memset
_pop_command:
;transceiver.c,370 :: 		void pop_command( struct s_data_queue *cmd )
;transceiver.c,374 :: 		if ( data_queue_size == 0 )                                                     // Если очередь пуста, ничего не делаем
0x01AD	0x1283      	BCF        STATUS, 5
0x01AE	0x1303      	BCF        STATUS, 6
0x01AF	0x0825      	MOVF       _data_queue_size, 0
0x01B0	0x3A00      	XORLW      0
0x01B1	0x1D03      	BTFSS      STATUS, 2
0x01B2	0x29B4      	GOTO       L_pop_command43
;transceiver.c,375 :: 		return;
0x01B3	0x29ED      	GOTO       L_end_pop_command
L_pop_command43:
;transceiver.c,377 :: 		memcpy(cmd, &data_queue[0], sizeof(struct s_data_queue));                    // Извлекаем первый элемент из очереди
0x01B4	0x084A      	MOVF       FARG_pop_command_cmd, 0
0x01B5	0x00CE      	MOVWF      FARG_memcpy_d1
0x01B6	0x30A0      	MOVLW      _data_queue
0x01B7	0x00CF      	MOVWF      FARG_memcpy_s1
0x01B8	0x3005      	MOVLW      5
0x01B9	0x00D0      	MOVWF      FARG_memcpy_n
0x01BA	0x3000      	MOVLW      0
0x01BB	0x00D1      	MOVWF      FARG_memcpy_n+1
0x01BC	0x2057      	CALL       _memcpy
;transceiver.c,379 :: 		for ( i = 0; i < data_queue_size - 1; ++i )                                 // Смещаем очередь
0x01BD	0x01CB      	CLRF       pop_command_i_L0
L_pop_command44:
0x01BE	0x3001      	MOVLW      1
0x01BF	0x0225      	SUBWF      _data_queue_size, 0
0x01C0	0x00F1      	MOVWF      R1
0x01C1	0x01F2      	CLRF       R1+1
0x01C2	0x1C03      	BTFSS      STATUS, 0
0x01C3	0x03F2      	DECF       R1+1, 1
0x01C4	0x3080      	MOVLW      128
0x01C5	0x00F0      	MOVWF      R0
0x01C6	0x3080      	MOVLW      128
0x01C7	0x0672      	XORWF      R1+1, 0
0x01C8	0x0270      	SUBWF      R0, 0
0x01C9	0x1D03      	BTFSS      STATUS, 2
0x01CA	0x29CD      	GOTO       L__pop_command120
0x01CB	0x0871      	MOVF       R1, 0
0x01CC	0x024B      	SUBWF      pop_command_i_L0, 0
L__pop_command120:
0x01CD	0x1803      	BTFSC      STATUS, 0
0x01CE	0x29EC      	GOTO       L_pop_command45
;transceiver.c,380 :: 		memcpy(&data_queue[i], &data_queue[i + 1], sizeof(struct s_data_queue));
0x01CF	0x3005      	MOVLW      5
0x01D0	0x00F0      	MOVWF      R0
0x01D1	0x084B      	MOVF       pop_command_i_L0, 0
0x01D2	0x00F4      	MOVWF      R4
0x01D3	0x20A2      	CALL       _Mul_8X8_U
0x01D4	0x0870      	MOVF       R0, 0
0x01D5	0x3EA0      	ADDLW      _data_queue
0x01D6	0x00CE      	MOVWF      FARG_memcpy_d1
0x01D7	0x084B      	MOVF       pop_command_i_L0, 0
0x01D8	0x3E01      	ADDLW      1
0x01D9	0x00F0      	MOVWF      R0
0x01DA	0x01F1      	CLRF       R0+1
0x01DB	0x1803      	BTFSC      STATUS, 0
0x01DC	0x0AF1      	INCF       R0+1, 1
0x01DD	0x3005      	MOVLW      5
0x01DE	0x00F4      	MOVWF      R4
0x01DF	0x3000      	MOVLW      0
0x01E0	0x00F5      	MOVWF      R4+1
0x01E1	0x2077      	CALL       _Mul_16X16_U
0x01E2	0x0870      	MOVF       R0, 0
0x01E3	0x3EA0      	ADDLW      _data_queue
0x01E4	0x00CF      	MOVWF      FARG_memcpy_s1
0x01E5	0x3005      	MOVLW      5
0x01E6	0x00D0      	MOVWF      FARG_memcpy_n
0x01E7	0x3000      	MOVLW      0
0x01E8	0x00D1      	MOVWF      FARG_memcpy_n+1
0x01E9	0x2057      	CALL       _memcpy
;transceiver.c,379 :: 		for ( i = 0; i < data_queue_size - 1; ++i )                                 // Смещаем очередь
0x01EA	0x0ACB      	INCF       pop_command_i_L0, 1
;transceiver.c,380 :: 		memcpy(&data_queue[i], &data_queue[i + 1], sizeof(struct s_data_queue));
0x01EB	0x29BE      	GOTO       L_pop_command44
L_pop_command45:
;transceiver.c,382 :: 		data_queue_size--;                                                          // Уменьшаем размер очереди
0x01EC	0x03A5      	DECF       _data_queue_size, 1
;transceiver.c,383 :: 		}
L_end_pop_command:
0x01ED	0x0008      	RETURN
; end of _pop_command
_send_packet:
;transceiver.c,286 :: 		unsigned char send_packet( unsigned char *cmd )
;transceiver.c,288 :: 		unsigned char res = ERR_PACKET_LOST;                                        // Результат выполнения
0x01EE	0x3002      	MOVLW      2
0x01EF	0x1283      	BCF        STATUS, 5
0x01F0	0x1303      	BCF        STATUS, 6
0x01F1	0x00CC      	MOVWF      send_packet_res_L0
;transceiver.c,289 :: 		signed char ack_wait = ack_timeout;                                         // Время одижания получения подтверждения
0x01F2	0x0823      	MOVF       _ack_timeout, 0
0x01F3	0x00CB      	MOVWF      send_packet_ack_wait_L0
;transceiver.c,291 :: 		if ( ++packet_num > 127 )                                                   // Увеличиваем номер пакета
0x01F4	0x0AA9      	INCF       _packet_num, 1
0x01F5	0x0829      	MOVF       _packet_num, 0
0x01F6	0x3C7F      	SUBLW      127
0x01F7	0x1803      	BTFSC      STATUS, 0
0x01F8	0x29FA      	GOTO       L_send_packet32
;transceiver.c,292 :: 		packet_num = 0;
0x01F9	0x01A9      	CLRF       _packet_num
L_send_packet32:
;transceiver.c,294 :: 		send_buf[0] = device_addr;                                                  // Отправитель
0x01FA	0x0824      	MOVF       _device_addr, 0
0x01FB	0x00B2      	MOVWF      _send_buf
;transceiver.c,295 :: 		send_buf[1] = cmd[0];                                                       // Получатель
0x01FC	0x084A      	MOVF       FARG_send_packet_cmd, 0
0x01FD	0x0084      	MOVWF      FSR
0x01FE	0x0800      	MOVF       INDF, 0
0x01FF	0x00B3      	MOVWF      _send_buf+1
;transceiver.c,296 :: 		send_buf[2] = packet_num;                                                   // Номер пакета
0x0200	0x0829      	MOVF       _packet_num, 0
0x0201	0x00B4      	MOVWF      _send_buf+2
;transceiver.c,297 :: 		send_buf[3] = cmd[1];                                                       // Первый байт данных (адрес)
0x0202	0x0A4A      	INCF       FARG_send_packet_cmd, 0
0x0203	0x0084      	MOVWF      FSR
0x0204	0x0800      	MOVF       INDF, 0
0x0205	0x00B5      	MOVWF      _send_buf+3
;transceiver.c,298 :: 		send_buf[4] = cmd[2];                                                       // Второй байт данных
0x0206	0x3002      	MOVLW      2
0x0207	0x074A      	ADDWF      FARG_send_packet_cmd, 0
0x0208	0x0084      	MOVWF      FSR
0x0209	0x0800      	MOVF       INDF, 0
0x020A	0x00B6      	MOVWF      _send_buf+4
;transceiver.c,299 :: 		send_buf[5] = cmd[3];                                                       // Третий байт данных
0x020B	0x3003      	MOVLW      3
0x020C	0x074A      	ADDWF      FARG_send_packet_cmd, 0
0x020D	0x0084      	MOVWF      FSR
0x020E	0x0800      	MOVF       INDF, 0
0x020F	0x00B7      	MOVWF      _send_buf+5
;transceiver.c,300 :: 		send_buf[6] = cmd[4];                                                       // Четвертый байт данных
0x0210	0x3004      	MOVLW      4
0x0211	0x074A      	ADDWF      FARG_send_packet_cmd, 0
0x0212	0x0084      	MOVWF      FSR
0x0213	0x0800      	MOVF       INDF, 0
0x0214	0x00B8      	MOVWF      _send_buf+6
;transceiver.c,301 :: 		send_buf[7] = crc8(send_buf);                                               // Контрольная сумма пакета
0x0215	0x3032      	MOVLW      _send_buf
0x0216	0x00CE      	MOVWF      FARG_crc8_block
0x0217	0x20BB      	CALL       _crc8
0x0218	0x0870      	MOVF       R0, 0
0x0219	0x00B9      	MOVWF      _send_buf+7
;transceiver.c,303 :: 		recv_done = 0;                                                              // Приемник готов к приему данных
0x021A	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,304 :: 		recv_processing = 0;
0x021B	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,306 :: 		MAX485_TRANSMIT;                                                            // Переводим MAX485 в режим передачи
0x021C	0x1486      	BSF        RB1_bit, BitPos(RB1_bit+0)
0x021D	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,308 :: 		send_data(send_buf, PACKET_SIZE);                                           // Отправляем пакет адресату
0x021E	0x3032      	MOVLW      _send_buf
0x021F	0x00CE      	MOVWF      FARG_send_data_d
0x0220	0x3008      	MOVLW      8
0x0221	0x00CF      	MOVWF      FARG_send_data_size
0x0222	0x20EC      	CALL       _send_data
;transceiver.c,310 :: 		MAX485_RECEIVE;                                                             // Переводим MAX485 в режим приема
0x0223	0x1086      	BCF        RB1_bit, BitPos(RB1_bit+0)
0x0224	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,313 :: 		INTCON.T0IE = 0;                                                            // Отключаем таймер для того чтобы не потерять ACK
0x0225	0x128B      	BCF        INTCON, 5
;transceiver.c,314 :: 		TMR0 = 0;
0x0226	0x0181      	CLRF       TMR0
;transceiver.c,316 :: 		INT_ENABLE;                                                                 // Разрешаем прерывания
0x0227	0x178B      	BSF        INTCON, 7
;transceiver.c,318 :: 		while ( ack_wait-- > 0 )                                                    // Ожидаем приема подтверждения получения команды
L_send_packet33:
0x0228	0x084B      	MOVF       send_packet_ack_wait_L0, 0
0x0229	0x00F1      	MOVWF      R1
0x022A	0x03CB      	DECF       send_packet_ack_wait_L0, 1
0x022B	0x3080      	MOVLW      128
0x022C	0x3A00      	XORLW      0
0x022D	0x00F0      	MOVWF      R0
0x022E	0x3080      	MOVLW      128
0x022F	0x0671      	XORWF      R1, 0
0x0230	0x0270      	SUBWF      R0, 0
0x0231	0x1803      	BTFSC      STATUS, 0
0x0232	0x2A5E      	GOTO       L_send_packet34
;transceiver.c,320 :: 		if ( recv_done )                                                        // Данные получены
0x0233	0x1DAA      	BTFSS      _recv_done, BitPos(_recv_done+0)
0x0234	0x2A55      	GOTO       L_send_packet35
;transceiver.c,322 :: 		INT_DISABLE;
0x0235	0x138B      	BCF        INTCON, 7
;transceiver.c,324 :: 		if ( crc8(recv_buf) == recv_buf[PACKET_SIZE - 1] )                   // Если контрольная сумма верная
0x0236	0x303A      	MOVLW      _recv_buf
0x0237	0x00CE      	MOVWF      FARG_crc8_block
0x0238	0x20BB      	CALL       _crc8
0x0239	0x0870      	MOVF       R0, 0
0x023A	0x0641      	XORWF      _recv_buf+7, 0
0x023B	0x1D03      	BTFSS      STATUS, 2
0x023C	0x2A52      	GOTO       L_send_packet36
;transceiver.c,326 :: 		if ( recv_buf[2] & 0b10000000 )                                 // Если полученные данные это подтверждение (ACK) ( установлен 8-й бит в номере пакета)
0x023D	0x1FBC      	BTFSS      _recv_buf+2, 7
0x023E	0x2A52      	GOTO       L_send_packet37
;transceiver.c,328 :: 		if ( (recv_buf[0] == cmd[0]) && (recv_buf[1] == device_addr) && ((recv_buf[2] & 0b01111111) == packet_num) )  // Если ACK данные получателя, отправителя и номер пакета совпадают
0x023F	0x084A      	MOVF       FARG_send_packet_cmd, 0
0x0240	0x0084      	MOVWF      FSR
0x0241	0x083A      	MOVF       _recv_buf, 0
0x0242	0x0600      	XORWF      INDF, 0
0x0243	0x1D03      	BTFSS      STATUS, 2
0x0244	0x2A52      	GOTO       L_send_packet40
0x0245	0x083B      	MOVF       _recv_buf+1, 0
0x0246	0x0624      	XORWF      _device_addr, 0
0x0247	0x1D03      	BTFSS      STATUS, 2
0x0248	0x2A52      	GOTO       L_send_packet40
0x0249	0x307F      	MOVLW      127
0x024A	0x053C      	ANDWF      _recv_buf+2, 0
0x024B	0x00F1      	MOVWF      R1
0x024C	0x0871      	MOVF       R1, 0
0x024D	0x0629      	XORWF      _packet_num, 0
0x024E	0x1D03      	BTFSS      STATUS, 2
0x024F	0x2A52      	GOTO       L_send_packet40
L__send_packet103:
;transceiver.c,330 :: 		res = ERR_OK;                                           // Подтверждение получено, команда принята получателем
0x0250	0x01CC      	CLRF       send_packet_res_L0
;transceiver.c,331 :: 		break;
0x0251	0x2A5E      	GOTO       L_send_packet34
;transceiver.c,332 :: 		}
L_send_packet40:
;transceiver.c,333 :: 		}
L_send_packet37:
;transceiver.c,334 :: 		}
L_send_packet36:
;transceiver.c,335 :: 		recv_processing = 0;                                                // Устанавливаем прием нового пакета
0x0252	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,336 :: 		recv_done = 0;
0x0253	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,338 :: 		INT_ENABLE;
0x0254	0x178B      	BSF        INTCON, 7
;transceiver.c,339 :: 		}
L_send_packet35:
;transceiver.c,341 :: 		Delay_ms(1);                                                            // Ждем ответа
0x0255	0x3007      	MOVLW      7
0x0256	0x00FC      	MOVWF      R12
0x0257	0x307D      	MOVLW      125
0x0258	0x00FD      	MOVWF      R13
L_send_packet41:
0x0259	0x0BFD      	DECFSZ     R13, 1
0x025A	0x2A59      	GOTO       L_send_packet41
0x025B	0x0BFC      	DECFSZ     R12, 1
0x025C	0x2A59      	GOTO       L_send_packet41
;transceiver.c,342 :: 		}
0x025D	0x2A28      	GOTO       L_send_packet33
L_send_packet34:
;transceiver.c,344 :: 		INT_DISABLE;                                                                // Запрещаем прерывания
0x025E	0x138B      	BCF        INTCON, 7
;transceiver.c,346 :: 		INTCON.T0IE = 1;                                                            // Восстанавливаем таймер
0x025F	0x168B      	BSF        INTCON, 5
;transceiver.c,348 :: 		recv_processing = 0;                                                        // Устанавливаем прием нового пакета
0x0260	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,349 :: 		recv_done = 0;
0x0261	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,351 :: 		return res;                                                                 // Возвращаем результат
0x0262	0x084C      	MOVF       send_packet_res_L0, 0
0x0263	0x00F0      	MOVWF      R0
;transceiver.c,352 :: 		}
L_end_send_packet:
0x0264	0x0008      	RETURN
; end of _send_packet
_comm_read:
;transceiver.c,409 :: 		void comm_read( )
;transceiver.c,413 :: 		i = COMMAND_SIZE - 1;
0x0265	0x3004      	MOVLW      4
0x0266	0x1283      	BCF        STATUS, 5
0x0267	0x1303      	BCF        STATUS, 6
0x0268	0x00C8      	MOVWF      comm_read_i_L0
;transceiver.c,414 :: 		n = 0;
0x0269	0x01C9      	CLRF       comm_read_n_L0
;transceiver.c,416 :: 		memset(&comm_cmd, 0, sizeof(struct s_data_queue));
0x026A	0x302D      	MOVLW      _comm_cmd
0x026B	0x00CA      	MOVWF      FARG_memset_p1
0x026C	0x01CB      	CLRF       FARG_memset_character
0x026D	0x3005      	MOVLW      5
0x026E	0x00CC      	MOVWF      FARG_memset_n
0x026F	0x3000      	MOVLW      0
0x0270	0x00CD      	MOVWF      FARG_memset_n+1
0x0271	0x2194      	CALL       _memset
;transceiver.c,419 :: 		comm_clk_prev_state = 0;                                                    // Предыдущее состоянии COMM_CLK_PIN
0x0272	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,420 :: 		comm_rd_complete = 0;
0x0273	0x10AA      	BCF        _comm_rd_complete, BitPos(_comm_rd_complete+0)
;transceiver.c,422 :: 		COMM_DATA_READY_PIN = 0;                                                    // Устройство не готово к приему
0x0274	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,424 :: 		INT_DISABLE;
0x0275	0x138B      	BCF        INTCON, 7
;transceiver.c,426 :: 		if ( recv_processing )
0x0276	0x1C2A      	BTFSS      _recv_processing, BitPos(_recv_processing+0)
0x0277	0x2A7A      	GOTO       L_comm_read52
;transceiver.c,428 :: 		INT_ENABLE;
0x0278	0x178B      	BSF        INTCON, 7
;transceiver.c,429 :: 		return;
0x0279	0x2B17      	GOTO       L_end_comm_read
;transceiver.c,430 :: 		}
L_comm_read52:
;transceiver.c,432 :: 		while ( !COMM_WR_PIN && COMM_RD_PIN )                                       // Если COMM_WR_PIN = 0 и COMM_RD_PIN = 1 мастер устройство начало процесс отправки данных
L_comm_read53:
0x027A	0x1986      	BTFSC      RB3_bit, BitPos(RB3_bit+0)
0x027B	0x2AB3      	GOTO       L_comm_read54
0x027C	0x1E06      	BTFSS      RB4_bit, BitPos(RB4_bit+0)
0x027D	0x2AB3      	GOTO       L_comm_read54
L__comm_read108:
;transceiver.c,434 :: 		comm_rd_complete = 1;
0x027E	0x14AA      	BSF        _comm_rd_complete, BitPos(_comm_rd_complete+0)
;transceiver.c,435 :: 		COMM_DATA_DIR = 1;                                                      // Пин данных - вход
0x027F	0x1683      	BSF        STATUS, 5
0x0280	0x1706      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,436 :: 		COMM_DATA_READY_PIN = 1;                                                // Устанавливаем готовность к приему данных от мастер устройства
0x0281	0x1283      	BCF        STATUS, 5
0x0282	0x1786      	BSF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,438 :: 		if ( COMM_CLK_PIN && comm_clk_prev_state == 0 )                         // Тактирование от мастер устройства (высокий уровень)
0x0283	0x1E86      	BTFSS      RB5_bit, BitPos(RB5_bit+0)
0x0284	0x2AAF      	GOTO       L_comm_read59
0x0285	0x192A      	BTFSC      _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
0x0286	0x2AAF      	GOTO       L_comm_read59
L__comm_read107:
;transceiver.c,440 :: 		comm_clk_prev_state = 1;
0x0287	0x152A      	BSF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,442 :: 		comm_cmd.b[i] <<= 1;                                                  // Сдвиг
0x0288	0x0848      	MOVF       comm_read_i_L0, 0
0x0289	0x3E2D      	ADDLW      _comm_cmd
0x028A	0x00F3      	MOVWF      R3
0x028B	0x0873      	MOVF       R3, 0
0x028C	0x0084      	MOVWF      FSR
0x028D	0x0800      	MOVF       INDF, 0
0x028E	0x00F2      	MOVWF      R2
0x028F	0x0872      	MOVF       R2, 0
0x0290	0x00F0      	MOVWF      R0
0x0291	0x0DF0      	RLF        R0, 1
0x0292	0x1070      	BCF        R0, 0
0x0293	0x0873      	MOVF       R3, 0
0x0294	0x0084      	MOVWF      FSR
0x0295	0x0870      	MOVF       R0, 0
0x0296	0x0080      	MOVWF      INDF
;transceiver.c,443 :: 		if ( COMM_DATA_PIN )                                                // Единица
0x0297	0x1F06      	BTFSS      RB6_bit, BitPos(RB6_bit+0)
0x0298	0x2AA5      	GOTO       L_comm_read60
;transceiver.c,444 :: 		comm_cmd.b[i] |= 1;
0x0299	0x0848      	MOVF       comm_read_i_L0, 0
0x029A	0x3E2D      	ADDLW      _comm_cmd
0x029B	0x00F1      	MOVWF      R1
0x029C	0x0871      	MOVF       R1, 0
0x029D	0x0084      	MOVWF      FSR
0x029E	0x3001      	MOVLW      1
0x029F	0x0400      	IORWF      INDF, 0
0x02A0	0x00F0      	MOVWF      R0
0x02A1	0x0871      	MOVF       R1, 0
0x02A2	0x0084      	MOVWF      FSR
0x02A3	0x0870      	MOVF       R0, 0
0x02A4	0x0080      	MOVWF      INDF
L_comm_read60:
;transceiver.c,446 :: 		if ( ++n >= 8 )
0x02A5	0x0AC9      	INCF       comm_read_n_L0, 1
0x02A6	0x3008      	MOVLW      8
0x02A7	0x0249      	SUBWF      comm_read_n_L0, 0
0x02A8	0x1C03      	BTFSS      STATUS, 0
0x02A9	0x2AAF      	GOTO       L_comm_read61
;transceiver.c,448 :: 		if ( i )
0x02AA	0x0848      	MOVF       comm_read_i_L0, 0
0x02AB	0x1903      	BTFSC      STATUS, 2
0x02AC	0x2AAE      	GOTO       L_comm_read62
;transceiver.c,449 :: 		i--;
0x02AD	0x03C8      	DECF       comm_read_i_L0, 1
L_comm_read62:
;transceiver.c,450 :: 		n = 0;
0x02AE	0x01C9      	CLRF       comm_read_n_L0
;transceiver.c,451 :: 		}
L_comm_read61:
;transceiver.c,452 :: 		}
L_comm_read59:
;transceiver.c,454 :: 		if ( !COMM_CLK_PIN )                                                    // Тактирование от мастер устройства (низкий уровень)
0x02AF	0x1A86      	BTFSC      RB5_bit, BitPos(RB5_bit+0)
0x02B0	0x2AB2      	GOTO       L_comm_read63
;transceiver.c,455 :: 		comm_clk_prev_state = 0;
0x02B1	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
L_comm_read63:
;transceiver.c,456 :: 		}
0x02B2	0x2A7A      	GOTO       L_comm_read53
L_comm_read54:
;transceiver.c,458 :: 		comm_clk_prev_state = 0;
0x02B3	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,461 :: 		if ( comm_rd_complete )                                                     // Принята команда
0x02B4	0x1CAA      	BTFSS      _comm_rd_complete, BitPos(_comm_rd_complete+0)
0x02B5	0x2ADC      	GOTO       L_comm_read64
;transceiver.c,463 :: 		if ( comm_cmd.b[0] == 255 )                              // Установка адреса устройства (если адрес получателя 0)  // fix 255 ?
0x02B6	0x082D      	MOVF       _comm_cmd, 0
0x02B7	0x3AFF      	XORLW      255
0x02B8	0x1D03      	BTFSS      STATUS, 2
0x02B9	0x2ACD      	GOTO       L_comm_read65
;transceiver.c,465 :: 		device_addr = comm_cmd.b[1];
0x02BA	0x082E      	MOVF       _comm_cmd+1, 0
0x02BB	0x00A4      	MOVWF      _device_addr
;transceiver.c,466 :: 		ack_timeout = comm_cmd.b[2];
0x02BC	0x082F      	MOVF       _comm_cmd+2, 0
0x02BD	0x00A3      	MOVWF      _ack_timeout
;transceiver.c,467 :: 		Delay_ms(50);
0x02BE	0x3002      	MOVLW      2
0x02BF	0x00FB      	MOVWF      R11
0x02C0	0x3045      	MOVLW      69
0x02C1	0x00FC      	MOVWF      R12
0x02C2	0x30A9      	MOVLW      169
0x02C3	0x00FD      	MOVWF      R13
L_comm_read66:
0x02C4	0x0BFD      	DECFSZ     R13, 1
0x02C5	0x2AC4      	GOTO       L_comm_read66
0x02C6	0x0BFC      	DECFSZ     R12, 1
0x02C7	0x2AC4      	GOTO       L_comm_read66
0x02C8	0x0BFB      	DECFSZ     R11, 1
0x02C9	0x2AC4      	GOTO       L_comm_read66
0x02CA	0x0000      	NOP
0x02CB	0x0000      	NOP
;transceiver.c,468 :: 		}
0x02CC	0x2ADC      	GOTO       L_comm_read67
L_comm_read65:
;transceiver.c,471 :: 		if ( send_packet(comm_cmd.b) == ERR_PACKET_LOST ) // Отправка пакета
0x02CD	0x302D      	MOVLW      _comm_cmd
0x02CE	0x00CA      	MOVWF      FARG_send_packet_cmd
0x02CF	0x21EE      	CALL       _send_packet
0x02D0	0x0870      	MOVF       R0, 0
0x02D1	0x3A02      	XORLW      2
0x02D2	0x1D03      	BTFSS      STATUS, 2
0x02D3	0x2ADC      	GOTO       L_comm_read68
;transceiver.c,472 :: 		memset(&comm_cmd, 0, sizeof(struct s_data_queue));                                                  // Ошибка отправки ( подтверждение не получено) - 0
0x02D4	0x302D      	MOVLW      _comm_cmd
0x02D5	0x00CA      	MOVWF      FARG_memset_p1
0x02D6	0x01CB      	CLRF       FARG_memset_character
0x02D7	0x3005      	MOVLW      5
0x02D8	0x00CC      	MOVWF      FARG_memset_n
0x02D9	0x3000      	MOVLW      0
0x02DA	0x00CD      	MOVWF      FARG_memset_n+1
0x02DB	0x2194      	CALL       _memset
L_comm_read68:
;transceiver.c,473 :: 		}
L_comm_read67:
;transceiver.c,474 :: 		}
L_comm_read64:
;transceiver.c,476 :: 		i = COMMAND_SIZE - 1;
0x02DC	0x3004      	MOVLW      4
0x02DD	0x00C8      	MOVWF      comm_read_i_L0
;transceiver.c,477 :: 		n = 0;
0x02DE	0x01C9      	CLRF       comm_read_n_L0
;transceiver.c,478 :: 		while ( !COMM_RD_PIN && COMM_WR_PIN )                                       // Если COMM_WR_PIN = 1 и COMM_RD_PIN = 0 мастер устройство начало процесс отправки данных
L_comm_read69:
0x02DF	0x1A06      	BTFSC      RB4_bit, BitPos(RB4_bit+0)
0x02E0	0x2B13      	GOTO       L_comm_read70
0x02E1	0x1D86      	BTFSS      RB3_bit, BitPos(RB3_bit+0)
0x02E2	0x2B13      	GOTO       L_comm_read70
L__comm_read106:
;transceiver.c,480 :: 		COMM_DATA_DIR = 0;                                                      // Пин данных - вход
0x02E3	0x1683      	BSF        STATUS, 5
0x02E4	0x1306      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,481 :: 		COMM_DATA_READY_PIN = 0;
0x02E5	0x1283      	BCF        STATUS, 5
0x02E6	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,483 :: 		if ( COMM_CLK_PIN && comm_clk_prev_state == 0 )                         // Тактирование от мастер устройства (высокий уровень)
0x02E7	0x1E86      	BTFSS      RB5_bit, BitPos(RB5_bit+0)
0x02E8	0x2B0F      	GOTO       L_comm_read75
0x02E9	0x192A      	BTFSC      _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
0x02EA	0x2B0F      	GOTO       L_comm_read75
L__comm_read105:
;transceiver.c,485 :: 		comm_clk_prev_state = 1;
0x02EB	0x152A      	BSF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,487 :: 		if ( comm_cmd.b[i] & 0x80 )
0x02EC	0x0848      	MOVF       comm_read_i_L0, 0
0x02ED	0x3E2D      	ADDLW      _comm_cmd
0x02EE	0x0084      	MOVWF      FSR
0x02EF	0x0800      	MOVF       INDF, 0
0x02F0	0x00F1      	MOVWF      R1
0x02F1	0x1FF1      	BTFSS      R1, 7
0x02F2	0x2AF5      	GOTO       L_comm_read76
;transceiver.c,488 :: 		COMM_DATA_PIN = 1;                                              // Единица
0x02F3	0x1706      	BSF        RB6_bit, BitPos(RB6_bit+0)
0x02F4	0x2AF6      	GOTO       L_comm_read77
L_comm_read76:
;transceiver.c,490 :: 		COMM_DATA_PIN = 0;                                              // Ноль
0x02F5	0x1306      	BCF        RB6_bit, BitPos(RB6_bit+0)
L_comm_read77:
;transceiver.c,492 :: 		comm_cmd.b[i] <<= 1;                                                     // Сдвиг
0x02F6	0x0848      	MOVF       comm_read_i_L0, 0
0x02F7	0x3E2D      	ADDLW      _comm_cmd
0x02F8	0x00F3      	MOVWF      R3
0x02F9	0x0873      	MOVF       R3, 0
0x02FA	0x0084      	MOVWF      FSR
0x02FB	0x0800      	MOVF       INDF, 0
0x02FC	0x00F2      	MOVWF      R2
0x02FD	0x0872      	MOVF       R2, 0
0x02FE	0x00F0      	MOVWF      R0
0x02FF	0x0DF0      	RLF        R0, 1
0x0300	0x1070      	BCF        R0, 0
0x0301	0x0873      	MOVF       R3, 0
0x0302	0x0084      	MOVWF      FSR
0x0303	0x0870      	MOVF       R0, 0
0x0304	0x0080      	MOVWF      INDF
;transceiver.c,493 :: 		if ( ++n >= 8 )
0x0305	0x0AC9      	INCF       comm_read_n_L0, 1
0x0306	0x3008      	MOVLW      8
0x0307	0x0249      	SUBWF      comm_read_n_L0, 0
0x0308	0x1C03      	BTFSS      STATUS, 0
0x0309	0x2B0F      	GOTO       L_comm_read78
;transceiver.c,495 :: 		if ( i )
0x030A	0x0848      	MOVF       comm_read_i_L0, 0
0x030B	0x1903      	BTFSC      STATUS, 2
0x030C	0x2B0E      	GOTO       L_comm_read79
;transceiver.c,496 :: 		i--;
0x030D	0x03C8      	DECF       comm_read_i_L0, 1
L_comm_read79:
;transceiver.c,497 :: 		n = 0;
0x030E	0x01C9      	CLRF       comm_read_n_L0
;transceiver.c,498 :: 		}
L_comm_read78:
;transceiver.c,499 :: 		}
L_comm_read75:
;transceiver.c,501 :: 		if ( !COMM_CLK_PIN )                                                    // Тактирование от мастер устройства (низкий уровень)
0x030F	0x1A86      	BTFSC      RB5_bit, BitPos(RB5_bit+0)
0x0310	0x2B12      	GOTO       L_comm_read80
;transceiver.c,502 :: 		comm_clk_prev_state = 0;
0x0311	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
L_comm_read80:
;transceiver.c,503 :: 		}
0x0312	0x2ADF      	GOTO       L_comm_read69
L_comm_read70:
;transceiver.c,505 :: 		COMM_DATA_READY_PIN = 0;
0x0313	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,506 :: 		COMM_DATA_DIR = 1;
0x0314	0x1683      	BSF        STATUS, 5
0x0315	0x1706      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,508 :: 		INT_ENABLE;
0x0316	0x178B      	BSF        INTCON, 7
;transceiver.c,509 :: 		}
L_end_comm_read:
0x0317	0x0008      	RETURN
; end of _comm_read
_comm_write:
;transceiver.c,514 :: 		void comm_write( )
;transceiver.c,518 :: 		i = COMMAND_SIZE - 1;
0x0318	0x3004      	MOVLW      4
0x0319	0x1283      	BCF        STATUS, 5
0x031A	0x1303      	BCF        STATUS, 6
0x031B	0x00C8      	MOVWF      comm_write_i_L0
;transceiver.c,519 :: 		n = 0;
0x031C	0x01C9      	CLRF       comm_write_n_L0
;transceiver.c,521 :: 		memset(&comm_cmd, 0, sizeof(struct s_data_queue));
0x031D	0x302D      	MOVLW      _comm_cmd
0x031E	0x00CA      	MOVWF      FARG_memset_p1
0x031F	0x01CB      	CLRF       FARG_memset_character
0x0320	0x3005      	MOVLW      5
0x0321	0x00CC      	MOVWF      FARG_memset_n
0x0322	0x3000      	MOVLW      0
0x0323	0x00CD      	MOVWF      FARG_memset_n+1
0x0324	0x2194      	CALL       _memset
;transceiver.c,524 :: 		comm_clk_prev_state = 0;                                                    // Предыдущее состоянии COMM_CLK_PIN
0x0325	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,525 :: 		comm_wr_processed = 0;                                                      // Процесс передачи не начат
0x0326	0x122A      	BCF        _comm_wr_processed, BitPos(_comm_wr_processed+0)
;transceiver.c,527 :: 		COMM_DATA_READY_PIN = 0;                                                    // Устройство не готово к приему
0x0327	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,529 :: 		INT_DISABLE;
0x0328	0x138B      	BCF        INTCON, 7
;transceiver.c,531 :: 		if ( recv_processing || data_queue_size == 0 )                                    // Если идет процесс приема пакета или очередь пуста, ничего не делаем
0x0329	0x182A      	BTFSC      _recv_processing, BitPos(_recv_processing+0)
0x032A	0x2B30      	GOTO       L__comm_write111
0x032B	0x0825      	MOVF       _data_queue_size, 0
0x032C	0x3A00      	XORLW      0
0x032D	0x1903      	BTFSC      STATUS, 2
0x032E	0x2B30      	GOTO       L__comm_write111
0x032F	0x2B32      	GOTO       L_comm_write83
L__comm_write111:
;transceiver.c,533 :: 		INT_ENABLE;
0x0330	0x178B      	BSF        INTCON, 7
;transceiver.c,534 :: 		return;
0x0331	0x2B76      	GOTO       L_end_comm_write
;transceiver.c,535 :: 		}
L_comm_write83:
;transceiver.c,537 :: 		while ( !COMM_RD_PIN && !COMM_WR_PIN )                                                      // Если COMM_WR_PIN = 0 мастер устройство начало процесс приема данных
L_comm_write84:
0x0332	0x1A06      	BTFSC      RB4_bit, BitPos(RB4_bit+0)
0x0333	0x2B72      	GOTO       L_comm_write85
0x0334	0x1986      	BTFSC      RB3_bit, BitPos(RB3_bit+0)
0x0335	0x2B72      	GOTO       L_comm_write85
L__comm_write110:
;transceiver.c,539 :: 		if ( !comm_wr_processed )                                               // Если передача не начата
0x0336	0x1A2A      	BTFSC      _comm_wr_processed, BitPos(_comm_wr_processed+0)
0x0337	0x2B46      	GOTO       L_comm_write88
;transceiver.c,541 :: 		comm_wr_processed = 1;                                              // Начинаем процесс передачи
0x0338	0x162A      	BSF        _comm_wr_processed, BitPos(_comm_wr_processed+0)
;transceiver.c,543 :: 		if ( data_queue_size )                                              // Если очередь команд не пуста
0x0339	0x0825      	MOVF       _data_queue_size, 0
0x033A	0x1903      	BTFSC      STATUS, 2
0x033B	0x2B46      	GOTO       L_comm_write89
;transceiver.c,545 :: 		i = COMMAND_SIZE - 1;
0x033C	0x3004      	MOVLW      4
0x033D	0x00C8      	MOVWF      comm_write_i_L0
;transceiver.c,546 :: 		n = 0;
0x033E	0x01C9      	CLRF       comm_write_n_L0
;transceiver.c,547 :: 		pop_command(&comm_cmd);                                              // Извлекаем команду из очереди
0x033F	0x302D      	MOVLW      _comm_cmd
0x0340	0x00CA      	MOVWF      FARG_pop_command_cmd
0x0341	0x21AD      	CALL       _pop_command
;transceiver.c,548 :: 		COMM_DATA_DIR = 0;                                              // Пин данных - выход
0x0342	0x1683      	BSF        STATUS, 5
0x0343	0x1306      	BCF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,549 :: 		COMM_DATA_READY_PIN = 1;                                        // Устанавливаем готовность передачи данных мастер устройству
0x0344	0x1283      	BCF        STATUS, 5
0x0345	0x1786      	BSF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,550 :: 		}
L_comm_write89:
;transceiver.c,551 :: 		}
L_comm_write88:
;transceiver.c,553 :: 		if ( COMM_CLK_PIN && comm_clk_prev_state == 0 )                         // Тактирование от мастер устройства (высокий уровень)
0x0346	0x1E86      	BTFSS      RB5_bit, BitPos(RB5_bit+0)
0x0347	0x2B6E      	GOTO       L_comm_write92
0x0348	0x192A      	BTFSC      _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
0x0349	0x2B6E      	GOTO       L_comm_write92
L__comm_write109:
;transceiver.c,555 :: 		comm_clk_prev_state = 1;
0x034A	0x152A      	BSF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,557 :: 		if ( comm_cmd.b[i] & 0x80 )
0x034B	0x0848      	MOVF       comm_write_i_L0, 0
0x034C	0x3E2D      	ADDLW      _comm_cmd
0x034D	0x0084      	MOVWF      FSR
0x034E	0x0800      	MOVF       INDF, 0
0x034F	0x00F1      	MOVWF      R1
0x0350	0x1FF1      	BTFSS      R1, 7
0x0351	0x2B54      	GOTO       L_comm_write93
;transceiver.c,558 :: 		COMM_DATA_PIN = 1;                                              // Единица
0x0352	0x1706      	BSF        RB6_bit, BitPos(RB6_bit+0)
0x0353	0x2B55      	GOTO       L_comm_write94
L_comm_write93:
;transceiver.c,560 :: 		COMM_DATA_PIN = 0;                                              // Ноль
0x0354	0x1306      	BCF        RB6_bit, BitPos(RB6_bit+0)
L_comm_write94:
;transceiver.c,562 :: 		comm_cmd.b[i] <<= 1;                                                     // Сдвиг
0x0355	0x0848      	MOVF       comm_write_i_L0, 0
0x0356	0x3E2D      	ADDLW      _comm_cmd
0x0357	0x00F3      	MOVWF      R3
0x0358	0x0873      	MOVF       R3, 0
0x0359	0x0084      	MOVWF      FSR
0x035A	0x0800      	MOVF       INDF, 0
0x035B	0x00F2      	MOVWF      R2
0x035C	0x0872      	MOVF       R2, 0
0x035D	0x00F0      	MOVWF      R0
0x035E	0x0DF0      	RLF        R0, 1
0x035F	0x1070      	BCF        R0, 0
0x0360	0x0873      	MOVF       R3, 0
0x0361	0x0084      	MOVWF      FSR
0x0362	0x0870      	MOVF       R0, 0
0x0363	0x0080      	MOVWF      INDF
;transceiver.c,563 :: 		if ( ++n >= 8 )
0x0364	0x0AC9      	INCF       comm_write_n_L0, 1
0x0365	0x3008      	MOVLW      8
0x0366	0x0249      	SUBWF      comm_write_n_L0, 0
0x0367	0x1C03      	BTFSS      STATUS, 0
0x0368	0x2B6E      	GOTO       L_comm_write95
;transceiver.c,565 :: 		if ( i )
0x0369	0x0848      	MOVF       comm_write_i_L0, 0
0x036A	0x1903      	BTFSC      STATUS, 2
0x036B	0x2B6D      	GOTO       L_comm_write96
;transceiver.c,566 :: 		i--;
0x036C	0x03C8      	DECF       comm_write_i_L0, 1
L_comm_write96:
;transceiver.c,567 :: 		n = 0;
0x036D	0x01C9      	CLRF       comm_write_n_L0
;transceiver.c,568 :: 		}
L_comm_write95:
;transceiver.c,569 :: 		}
L_comm_write92:
;transceiver.c,571 :: 		if ( !COMM_CLK_PIN )                                                    // Тактирование от мастер устройства (низкий уровень)
0x036E	0x1A86      	BTFSC      RB5_bit, BitPos(RB5_bit+0)
0x036F	0x2B71      	GOTO       L_comm_write97
;transceiver.c,572 :: 		comm_clk_prev_state = 0;
0x0370	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
L_comm_write97:
;transceiver.c,573 :: 		}
0x0371	0x2B32      	GOTO       L_comm_write84
L_comm_write85:
;transceiver.c,575 :: 		COMM_DATA_READY_PIN = 0;                                                    // Устройство не готово к приему (мастер устройство прекратило прием)
0x0372	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,576 :: 		COMM_DATA_DIR = 1;                                                          // Пин данных - вход
0x0373	0x1683      	BSF        STATUS, 5
0x0374	0x1706      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,578 :: 		INT_ENABLE;
0x0375	0x178B      	BSF        INTCON, 7
;transceiver.c,579 :: 		}
L_end_comm_write:
0x0376	0x0008      	RETURN
; end of _comm_write
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0377	0x2120      	CALL       _____DoICP
0x0378	0x118A      	BCF        PCLATH, 3
0x0379	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x037A	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x037B	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x037C	0x0AAB      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x037D	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x037E	0x0AAC      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x037F	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x0380	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x0381	0x2B77      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x0382	0x0008      	RETURN
; end of ___CC2DW
_process_received_packet:
;transceiver.c,386 :: 		void process_received_packet( )
;transceiver.c,388 :: 		if ( recv_done )                                                            // Данные получены
0x0383	0x1283      	BCF        STATUS, 5
0x0384	0x1303      	BCF        STATUS, 6
0x0385	0x1DAA      	BTFSS      _recv_done, BitPos(_recv_done+0)
0x0386	0x2B9C      	GOTO       L_process_received_packet47
;transceiver.c,390 :: 		INT_DISABLE;                                                            // Запрещаем прерывания
0x0387	0x138B      	BCF        INTCON, 7
;transceiver.c,392 :: 		if ( crc8(recv_buf) == recv_buf[PACKET_SIZE - 1] )                      // Проверяем контрольную сумму принятых данных (последний элемент приемного буфера)
0x0388	0x303A      	MOVLW      _recv_buf
0x0389	0x00CE      	MOVWF      FARG_crc8_block
0x038A	0x20BB      	CALL       _crc8
0x038B	0x0870      	MOVF       R0, 0
0x038C	0x0641      	XORWF      _recv_buf+7, 0
0x038D	0x1D03      	BTFSS      STATUS, 2
0x038E	0x2B99      	GOTO       L_process_received_packet48
;transceiver.c,394 :: 		if ( (recv_buf[1] == device_addr) && !(recv_buf[2] & 0b10000000) )  // Если пакет адресован получателю и не является подтверждающим
0x038F	0x083B      	MOVF       _recv_buf+1, 0
0x0390	0x0624      	XORWF      _device_addr, 0
0x0391	0x1D03      	BTFSS      STATUS, 2
0x0392	0x2B99      	GOTO       L_process_received_packet51
0x0393	0x1BBC      	BTFSC      _recv_buf+2, 7
0x0394	0x2B99      	GOTO       L_process_received_packet51
L__process_received_packet104:
;transceiver.c,396 :: 		send_ack(recv_buf);                                             // Посылаем подтверждение отправителю
0x0395	0x303A      	MOVLW      _recv_buf
0x0396	0x00CA      	MOVWF      FARG_send_ack_bf
0x0397	0x2169      	CALL       _send_ack
;transceiver.c,397 :: 		push_command();                                                 // Помещаем данные в очередь
0x0398	0x2127      	CALL       _push_command
;transceiver.c,398 :: 		}
L_process_received_packet51:
;transceiver.c,399 :: 		}
L_process_received_packet48:
;transceiver.c,401 :: 		recv_processing = 0;                                                    // Устанавливаем прием нового пакета
0x0399	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,402 :: 		recv_done = 0;                                                          // Разрешаем перезапись буфера приема
0x039A	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,404 :: 		INT_ENABLE;                                                             // Разрешаем прерывания
0x039B	0x178B      	BSF        INTCON, 7
;transceiver.c,405 :: 		}
L_process_received_packet47:
;transceiver.c,406 :: 		}
L_end_process_received_packet:
0x039C	0x0008      	RETURN
; end of _process_received_packet
_main:
0x039D	0x1283      	BCF        STATUS, 5
0x039E	0x1303      	BCF        STATUS, 6
0x039F	0x01A2      	CLRF       _bit_time
0x03A0	0x3064      	MOVLW      100
0x03A1	0x00A3      	MOVWF      _ack_timeout
0x03A2	0x01A4      	CLRF       _device_addr
0x03A3	0x01A5      	CLRF       _data_queue_size
0x03A4	0x01A6      	CLRF       _recv_byte_counter
0x03A5	0x01A7      	CLRF       _recv_byte
0x03A6	0x01A8      	CLRF       _recv_bit_counter
0x03A7	0x01A9      	CLRF       _packet_num
;transceiver.c,582 :: 		void main()
;transceiver.c,584 :: 		unsigned long led_counter = 0;
0x03A8	0x01C4      	CLRF       main_led_counter_L0
0x03A9	0x01C5      	CLRF       main_led_counter_L0+1
0x03AA	0x01C6      	CLRF       main_led_counter_L0+2
0x03AB	0x01C7      	CLRF       main_led_counter_L0+3
;transceiver.c,586 :: 		CMCON               = 0x07;                                                 // Компаратор выключен
0x03AC	0x3007      	MOVLW      7
0x03AD	0x009F      	MOVWF      CMCON
;transceiver.c,588 :: 		LED_DIR             = 0;
0x03AE	0x1683      	BSF        STATUS, 5
0x03AF	0x1085      	BCF        TRISA1_bit, BitPos(TRISA1_bit+0)
;transceiver.c,589 :: 		LED_PIN             = 0;
0x03B0	0x1283      	BCF        STATUS, 5
0x03B1	0x1085      	BCF        RA1_bit, BitPos(RA1_bit+0)
;transceiver.c,591 :: 		COMM_WR_DIR         = 1;                                                    // COMM_WR         - вход
0x03B2	0x1683      	BSF        STATUS, 5
0x03B3	0x1586      	BSF        TRISB3_bit, BitPos(TRISB3_bit+0)
;transceiver.c,592 :: 		COMM_RD_DIR         = 1;                                                    // COMM_RD         - вход
0x03B4	0x1606      	BSF        TRISB4_bit, BitPos(TRISB4_bit+0)
;transceiver.c,593 :: 		COMM_CLK_DIR        = 1;                                                    // COMM_CLK        - вход
0x03B5	0x1686      	BSF        TRISB5_bit, BitPos(TRISB5_bit+0)
;transceiver.c,594 :: 		COMM_DATA_DIR       = 1;                                                    // COMM_DATA       - вход
0x03B6	0x1706      	BSF        TRISB6_bit, BitPos(TRISB6_bit+0)
;transceiver.c,595 :: 		COMM_DATA_READY_DIR = 0;                                                    // COMM_DATA_READY - выход
0x03B7	0x1386      	BCF        TRISB7_bit, BitPos(TRISB7_bit+0)
;transceiver.c,596 :: 		COMM_DATA_READY_PIN = 0;                                                    // COMM_DATA_READY = 0
0x03B8	0x1283      	BCF        STATUS, 5
0x03B9	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;transceiver.c,598 :: 		RO_DIR              = 1;                                                    // RO    - вход
0x03BA	0x1683      	BSF        STATUS, 5
0x03BB	0x1406      	BSF        TRISB0_bit, BitPos(TRISB0_bit+0)
;transceiver.c,599 :: 		DE_RE_DIR           = 0;                                                    // RE/DE - выход
0x03BC	0x1086      	BCF        TRISB1_bit, BitPos(TRISB1_bit+0)
;transceiver.c,600 :: 		DI_DIR              = 0;                                                    // DI    - выход
0x03BD	0x1106      	BCF        TRISB2_bit, BitPos(TRISB2_bit+0)
;transceiver.c,602 :: 		MAX485_RECEIVE;                                                             // MAX485 в режиме приема
0x03BE	0x1283      	BCF        STATUS, 5
0x03BF	0x1086      	BCF        RB1_bit, BitPos(RB1_bit+0)
0x03C0	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;transceiver.c,604 :: 		OPTION_REG.INTEDG   = 1;                                                    // Прерывание INT0 по нарастающему фронту
0x03C1	0x1683      	BSF        STATUS, 5
0x03C2	0x1701      	BSF        OPTION_REG, 6
;transceiver.c,605 :: 		OPTION_REG.T0CS     = 0;                                                    // Тактирование таймера 0 от внутреннего генератора
0x03C3	0x1281      	BCF        OPTION_REG, 5
;transceiver.c,606 :: 		OPTION_REG.PSA      = 0;                                                    // Использовать пределитель для таймера 0
0x03C4	0x1181      	BCF        OPTION_REG, 3
;transceiver.c,607 :: 		OPTION_REG.PS2      = 0;                                                    // Предделитель
0x03C5	0x1101      	BCF        OPTION_REG, 2
;transceiver.c,608 :: 		OPTION_REG.PS1      = 1;  //1
0x03C6	0x1481      	BSF        OPTION_REG, 1
;transceiver.c,609 :: 		OPTION_REG.PS0      = 0;
0x03C7	0x1001      	BCF        OPTION_REG, 0
;transceiver.c,611 :: 		INTCON.PEIE         = 1;                                                    // Разрешаем периферийные прерывания
0x03C8	0x170B      	BSF        INTCON, 6
;transceiver.c,612 :: 		INTCON.T0IE         = 1;                                                    // Разрешаем прерывание таймера 0
0x03C9	0x168B      	BSF        INTCON, 5
;transceiver.c,613 :: 		INTCON.INTE         = 1;                                                    // Разрешаем прерывание INT0
0x03CA	0x160B      	BSF        INTCON, 4
;transceiver.c,615 :: 		recv_done           = 0;                                                    // Инициализация флагов
0x03CB	0x1283      	BCF        STATUS, 5
0x03CC	0x11AA      	BCF        _recv_done, BitPos(_recv_done+0)
;transceiver.c,616 :: 		recv_processing     = 0;
0x03CD	0x102A      	BCF        _recv_processing, BitPos(_recv_processing+0)
;transceiver.c,617 :: 		comm_clk_prev_state = 0;
0x03CE	0x112A      	BCF        _comm_clk_prev_state, BitPos(_comm_clk_prev_state+0)
;transceiver.c,618 :: 		comm_rd_complete    = 0;
0x03CF	0x10AA      	BCF        _comm_rd_complete, BitPos(_comm_rd_complete+0)
;transceiver.c,619 :: 		comm_wr_processed   = 0;
0x03D0	0x122A      	BCF        _comm_wr_processed, BitPos(_comm_wr_processed+0)
;transceiver.c,621 :: 		INT_ENABLE;                                                                 // Разрешаем все прерывания
0x03D1	0x178B      	BSF        INTCON, 7
;transceiver.c,623 :: 		while ( 1 )
L_main98:
;transceiver.c,625 :: 		process_received_packet();                                              // Обработка принятых данных
0x03D2	0x2383      	CALL       _process_received_packet
;transceiver.c,627 :: 		comm_read();                                                            // Прием данных мастер устройства
0x03D3	0x2265      	CALL       _comm_read
;transceiver.c,629 :: 		comm_write();                                                           // Передача данных в мастер устройство
0x03D4	0x2318      	CALL       _comm_write
;transceiver.c,631 :: 		if ( led_counter++ > 10000 )
0x03D5	0x1283      	BCF        STATUS, 5
0x03D6	0x1303      	BCF        STATUS, 6
0x03D7	0x0844      	MOVF       main_led_counter_L0, 0
0x03D8	0x00F4      	MOVWF      R4
0x03D9	0x0845      	MOVF       main_led_counter_L0+1, 0
0x03DA	0x00F5      	MOVWF      R4+1
0x03DB	0x0846      	MOVF       main_led_counter_L0+2, 0
0x03DC	0x00F6      	MOVWF      R4+2
0x03DD	0x0847      	MOVF       main_led_counter_L0+3, 0
0x03DE	0x00F7      	MOVWF      R4+3
0x03DF	0x0844      	MOVF       main_led_counter_L0, 0
0x03E0	0x00F0      	MOVWF      R0
0x03E1	0x0845      	MOVF       main_led_counter_L0+1, 0
0x03E2	0x00F1      	MOVWF      R0+1
0x03E3	0x0846      	MOVF       main_led_counter_L0+2, 0
0x03E4	0x00F2      	MOVWF      R0+2
0x03E5	0x0847      	MOVF       main_led_counter_L0+3, 0
0x03E6	0x00F3      	MOVWF      R0+3
0x03E7	0x0AF0      	INCF       R0, 1
0x03E8	0x1903      	BTFSC      STATUS, 2
0x03E9	0x0AF1      	INCF       R0+1, 1
0x03EA	0x1903      	BTFSC      STATUS, 2
0x03EB	0x0AF2      	INCF       R0+2, 1
0x03EC	0x1903      	BTFSC      STATUS, 2
0x03ED	0x0AF3      	INCF       R0+3, 1
0x03EE	0x0870      	MOVF       R0, 0
0x03EF	0x00C4      	MOVWF      main_led_counter_L0
0x03F0	0x0871      	MOVF       R0+1, 0
0x03F1	0x00C5      	MOVWF      main_led_counter_L0+1
0x03F2	0x0872      	MOVF       R0+2, 0
0x03F3	0x00C6      	MOVWF      main_led_counter_L0+2
0x03F4	0x0873      	MOVF       R0+3, 0
0x03F5	0x00C7      	MOVWF      main_led_counter_L0+3
0x03F6	0x0877      	MOVF       R4+3, 0
0x03F7	0x3C00      	SUBLW      0
0x03F8	0x1D03      	BTFSS      STATUS, 2
0x03F9	0x2C04      	GOTO       L__main125
0x03FA	0x0876      	MOVF       R4+2, 0
0x03FB	0x3C00      	SUBLW      0
0x03FC	0x1D03      	BTFSS      STATUS, 2
0x03FD	0x2C04      	GOTO       L__main125
0x03FE	0x0875      	MOVF       R4+1, 0
0x03FF	0x3C27      	SUBLW      39
0x0400	0x1D03      	BTFSS      STATUS, 2
0x0401	0x2C04      	GOTO       L__main125
0x0402	0x0874      	MOVF       R4, 0
0x0403	0x3C10      	SUBLW      16
L__main125:
0x0404	0x1803      	BTFSC      STATUS, 0
0x0405	0x2C0C      	GOTO       L_main100
;transceiver.c,633 :: 		led_counter = 0;
0x0406	0x01C4      	CLRF       main_led_counter_L0
0x0407	0x01C5      	CLRF       main_led_counter_L0+1
0x0408	0x01C6      	CLRF       main_led_counter_L0+2
0x0409	0x01C7      	CLRF       main_led_counter_L0+3
;transceiver.c,634 :: 		LED_PIN = ~LED_PIN;
0x040A	0x3002      	MOVLW      2
0x040B	0x0685      	XORWF      RA1_bit, 1
;transceiver.c,635 :: 		}
L_main100:
;transceiver.c,636 :: 		}
0x040C	0x2BD2      	GOTO       L_main98
;transceiver.c,637 :: 		}
L_end_main:
0x040D	0x2C0D      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [83]    _interrupt
0x0057      [32]    _memcpy
0x0077      [43]    _Mul_16X16_U
0x00A2      [25]    _Mul_8X8_U
0x00BB      [49]    _crc8
0x00EC      [52]    _send_data
0x0120       [7]    _____DoICP
0x0127      [66]    _push_command
0x0169      [43]    _send_ack
0x0194      [25]    _memset
0x01AD      [65]    _pop_command
0x01EE     [119]    _send_packet
0x0265     [179]    _comm_read
0x0318      [95]    _comm_write
0x0377      [12]    ___CC2DW
0x0383      [26]    _process_received_packet
0x039D     [113]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [0]    RA1_bit
0x0006       [0]    RB2_bit
0x0006       [0]    RB3_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB7_bit
0x0006       [0]    RB6_bit
0x0006       [0]    RB5_bit
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000B       [0]    INTF_bit
0x000B       [0]    TMR0IF_bit
0x001F       [1]    CMCON
0x0022       [1]    _bit_time
0x0023       [1]    _ack_timeout
0x0024       [1]    _device_addr
0x0025       [1]    _data_queue_size
0x0026       [1]    _recv_byte_counter
0x0027       [1]    _recv_byte
0x0028       [1]    _recv_bit_counter
0x0029       [1]    _packet_num
0x002A       [0]    _comm_wr_processed
0x002A       [0]    _comm_rd_complete
0x002A       [0]    _recv_done
0x002A       [0]    _recv_processing
0x002A       [0]    _comm_clk_prev_state
0x002B       [2]    ___DoICPAddr
0x002D       [5]    _comm_cmd
0x0032       [8]    _send_buf
0x003A       [8]    _recv_buf
0x0042       [1]    ___savePCLATH
0x0043       [1]    ___saveSTATUS
0x0044       [4]    main_led_counter_L0
0x0048       [1]    comm_write_i_L0
0x0048       [1]    comm_read_i_L0
0x0049       [1]    comm_read_n_L0
0x0049       [1]    comm_write_n_L0
0x004A       [1]    FARG_send_packet_cmd
0x004A       [1]    FARG_memset_p1
0x004A       [1]    FARG_send_ack_bf
0x004A       [1]    FARG_pop_command_cmd
0x004B       [1]    send_packet_ack_wait_L0
0x004B       [1]    pop_command_i_L0
0x004B       [1]    FARG_memset_character
0x004C       [2]    FARG_memset_n
0x004C       [1]    send_packet_res_L0
0x004E       [1]    FARG_crc8_block
0x004E       [1]    FARG_send_data_d
0x004E       [1]    FARG_memcpy_d1
0x004F       [1]    FARG_memcpy_s1
0x004F       [1]    FARG_send_data_size
0x004F       [1]    crc8_crc_L0
0x0050       [2]    FARG_memcpy_n
0x0050       [1]    crc8_len_L0
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [0]    TRISA1_bit
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB4_bit
0x0086       [0]    TRISB1_bit
0x0086       [0]    TRISB0_bit
0x0086       [0]    TRISB7_bit
0x0086       [0]    TRISB5_bit
0x0086       [0]    TRISB6_bit
0x0086       [0]    TRISB2_bit
0x00A0      [80]    _data_queue
